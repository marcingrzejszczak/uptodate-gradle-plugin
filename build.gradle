buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "pl.allegro.tech.build:axion-release-plugin:1.3.4"
        classpath "com.bmuschko:gradle-nexus-plugin:2.3"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"

        if (project.hasProperty('coverage')) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
            classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.0"
        }
    }
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    packageGroup = "com.toomuchcoding"
}

apply plugin: "pl.allegro.tech.build.axion-release"

scmVersion {
    tag { prefix = "uptodate" }
    createReleaseCommit = true
    releaseCommitMessage { version, position -> "Release version: ${version}\n\n[ci skip]" }
    hooks {
        pre "fileUpdate", [file       : "README.adoc",
                           pattern    : { v, p -> /:lib_version:.*/ },
                           replacement: { v, p -> ":lib_version: $v" }]
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'

group = 'com.toomuchcoding'
description = 'Core of UpToDate plugin'
project.version = '1.0.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'

    testCompile 'junit:junit:4.11'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.3"
    testCompile 'com.github.tomakehurst:wiremock:1.47'
    testCompile 'com.google.guava:guava:18.0'
    testRuntime 'cglib:cglib-nodep:2.2.2'
    testRuntime 'org.objenesis:objenesis:1.2'
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

// publication

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    publications {
        code(MavenPublication) {
            from components.java
            pom.withXml {
                //#89 - workaround to not to have only runtime dependencies in generated pom.xml
                //Known limitation in maven-publish - - http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime#reply_14120711
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

if (!version.contains('SNAPSHOT')) {
    apply from: "$rootDir/gradle/release.gradle"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

if (project.hasProperty('coverage')) {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'org.sonarqube'

    jacoco {
        toolVersion = '0.7.1.201405082137'
        excludes = ['com.toomuchcoding.uptodate.dependency.maven.*']
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
    test {
        ignoreFailures = true
    }
    sonarqube {
        properties {
            property "sonar.groovy.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        }
    }
}

